{"/home/travis/build/npmtest/node-npmtest-showtimes/test.js":"/* istanbul instrument in package npmtest_showtimes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-showtimes/lib.npmtest_showtimes.js":"/* istanbul instrument in package npmtest_showtimes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_showtimes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_showtimes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-showtimes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-showtimes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_showtimes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_showtimes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_showtimes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_showtimes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_showtimes.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_showtimes.__dirname + '/lib.npmtest_showtimes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-showtimes/node_modules/showtimes/src/index.js":"'use strict'\n\nvar request = require('request')\nvar cheerio = require('cheerio')\nvar qs = require('querystring')\nvar url = require('url')\nvar iconv = require('iconv-lite')\nvar _ = require('underscore')\n\nclass showtimes {\n  /**\n   * @param  {string} location Location that you want to pull movie showtimes for.\n   * @param  {object} options  Object containing available options (like: lang, date, or pageLimit).\n   * @return {object}\n   */\n  constructor (location, options) {\n    this.userAgent = 'showtimes (http://github.com/erunion/showtimes)'\n    this.baseUrl = 'http://google.com/movies'\n    this.location = location\n\n    // Handle available options\n    if (typeof options === 'undefined') {\n      options = {}\n    }\n\n    this.date = typeof options.date !== 'undefined' ? options.date : 0\n    this.lang = typeof options.lang !== 'undefined' ? options.lang : 'en'\n    this.pageLimit = typeof options.pageLimit !== 'undefined' ? options.pageLimit : 999\n  }\n\n  /**\n   * Parse and pull back an object of movie theaters for the currently configured location and date.\n   * @param  {string=}  query         Query string which works as a way to filter the theaters.\n   * @param  {Function} cb            Callback function to run after generating an object of theaters.\n   * @param  {number=}  [page=1]      Paginated page to pull theaters from. Hidden API, and is only used internally.\n   * @param  {object=}  [theaters=[]] Currently generated theaters. Hidden API, and is only used internally.\n   * @return void\n   */\n  getTheaters () {\n    this.page = 1\n    this.theaters = []\n\n    var query = (typeof arguments[0] !== 'function') ? arguments[0] : null\n    var cb = (typeof arguments[0] === 'function') ? arguments[0] : arguments[1]\n    var extraIdx = (typeof arguments[0] === 'function') ? 1 : 2\n\n    if (arguments.length > extraIdx) {\n      this.page = arguments[extraIdx]\n      this.theaters = arguments[extraIdx + 1]\n    }\n\n    var api = this\n    this._request({q: query}, cb, (response) => {\n      if (api.lang === 'tr') {\n        response = iconv.decode(response, 'latin5')\n      }\n\n      var $ = cheerio.load(response)\n      if ($('.theater').length === 0) {\n        cb($('#results').text())\n        return\n      }\n\n      $('.theater').each((i, theater) => {\n        var theaterData = api._parseTheater($, $(theater))\n        if (theaterData.name.length === 0) {\n          return true\n        }\n\n        api.theaters.push(theaterData)\n      })\n\n      // No pages to paginate, so return the theaters back.\n      if ($('#navbar td a:contains(\"Next\")').length === 0 || api.page === api.pageLimit) {\n        cb(null, api.theaters)\n        return\n      }\n\n      // Use the hidden API of getTheaters to pass in the next page and current theaters.\n      api.getTheaters(query, cb, ++api.page, api.theaters)\n    })\n  }\n\n  /**\n   * Parse and pull back a standardized object for a given movie.\n   * @param  {string}   theaterId  Theater ID for the theater you want to query. This can be obtained via getTheaters(),\n   *                               or getMovies()\n   * @param  {Function} cb         Callback function to run after generating a standardized object for this theater.\n   * @return {void}\n   */\n  getTheater (theaterId, cb) {\n    var api = this\n    this._request({tid: theaterId}, cb, (response) => {\n      var $ = cheerio.load(response)\n      if (!$('.showtimes')) {\n        cb($('#results').text())\n        return\n      }\n\n      var theater = $('.theater')\n      var theaterData = api._parseTheater($, theater, false, theaterId)\n\n      cb(null, theaterData)\n    })\n  }\n\n  /**\n   * Parse and pull back an object of movies for the currently configured location and date.\n   * @param  {string=}  query        Query string which works as a way to filter the movies.\n   * @param  {Function} cb           Callback function to run after generating an object of movies.\n   * @param  {number=}  [page=1]     Paginated page to pull movies from. Hidden API, and is only used internally.\n   * @param  {object=}  [movies=[]]  Currently generated movies. Hidden API, and is only used internally.\n   * @return void\n   */\n  getMovies () {\n    this.page = 1\n    this.movies = []\n\n    var query = (typeof arguments[0] !== 'function') ? arguments[0] : null\n    var cb = (typeof arguments[0] === 'function') ? arguments[0] : arguments[1]\n    var extraIdx = (typeof arguments[0] === 'function') ? 1 : 2\n\n    if (arguments.length > extraIdx) {\n      this.page = arguments[extraIdx]\n      this.movies = arguments[extraIdx + 1]\n    }\n\n    var api = this\n    this._request({sort: 1, q: query}, cb, (response) => {\n      if (api.lang === 'tr') {\n        response = iconv.decode(response, 'latin5')\n      }\n\n      var $ = cheerio.load(response)\n      if ($('.movie').length === 0) {\n        cb($('#results').text())\n        return\n      }\n\n      var movieData\n      $('.movie').each((i, movie) => {\n        movie = $(movie)\n        movieData = api._parseMovie($, movie, true)\n        if (!movieData) {\n          return\n        }\n\n        delete movieData.showtimes\n        movieData.theaters = []\n\n        movie.find('.showtimes .theater').each((j, theater) => {\n          movieData.theaters.push(api._parseTheater($, $(theater), true))\n        })\n\n        api.movies.push(movieData)\n      })\n\n      // No pages to paginate, so return the movies back.\n      if ($('#navbar td a:contains(\"Next\")').length === 0 || api.page === api.pageLimit) {\n        cb(null, api.movies)\n        return\n      }\n\n      // Use the hidden API of getMovies to pass in the next page and current\n      // movies.\n      api.getMovies(query, cb, ++api.page, api.movies)\n    })\n  }\n\n  /**\n   * Parse and pull back a standardized object for a given movie.\n   * @param  {string}   movieId  Movie ID for the movie you want to query. This can be obtained via getTheaters(), or\n   *                             getMovies()\n   * @param  {Function} cb       Callback function to run after generating a standardized object for this movie.\n   * @return {void}\n   */\n  getMovie (movieId, cb) {\n    var api = this\n    this._request({mid: movieId}, cb, (response) => {\n      var $ = cheerio.load(response)\n      if (!$('.showtimes')) {\n        cb($('#results').text())\n        return\n      }\n\n      var movie = $('.movie')\n      var movieData = api._parseMovie($, movie, true, movieId)\n\n      delete movieData.showtimes\n      movieData.theaters = []\n\n      movie.find('.showtimes .theater').each((j, theater) => {\n        movieData.theaters.push(api._parseTheater($, $(theater), true))\n      })\n\n      cb(null, movieData)\n    })\n  }\n\n  /**\n   * Parse theater information to generate a standardized response.\n   * @param  {object}  $         Raw Cheerio object from a cheerio.load() call, used to parse movies for the given\n   *                             theater.\n   * @param  {object}  theater   Cheerio object for the theater that you want to parse.\n   * @param  {boolean} alternate If you are parsing a theater from a \"movie sort\", pass true to use alternate scraper\n   *                             logic.\n   * @return {object}            Standardized response for the parsed theater.\n   */\n  _parseTheater ($, theater, alternate, theaterId) {\n    alternate = (typeof alternate === 'undefined') ? false : alternate\n\n    var api = this\n\n    if (typeof theaterId === 'undefined') {\n      var cloakedUrl\n      if (alternate) {\n        cloakedUrl = theater.find('.name a').attr('href')\n      } else {\n        cloakedUrl = theater.find('.desc h2.name a').attr('href')\n      }\n      // Get the ID from left links\n      if (typeof cloakedUrl === 'undefined') {\n        cloakedUrl = $('#left_nav .section a').attr('href')\n      }\n\n      theaterId = null\n      if (cloakedUrl) {\n        cloakedUrl = qs.parse(url.parse(cloakedUrl).query)\n        if (typeof cloakedUrl.tid !== 'undefined') {\n          theaterId = cloakedUrl.tid\n        }\n      }\n    }\n\n    var info = theater.find('.desc .info').text().split(' - ')\n\n    if (alternate) {\n      var showtimes = api._parseShowtimes($, $(theater))\n\n      var theaterData = {\n        id: theaterId,\n        name: theater.find('.name').text(),\n        address: theater.find('.address').text(),\n        showtimes: showtimes.showtimes\n      }\n      if (showtimes.showtime_tickets) theaterData.showtime_tickets = showtimes.showtime_tickets\n\n      return theaterData\n    }\n\n    var movies = []\n    theater.find('.showtimes .movie').each((j, movie) => {\n      movie = api._parseMovie($, $(movie))\n      if (movie) {\n        movies.push(movie)\n      }\n    })\n\n    return {\n      id: theaterId,\n      name: theater.find('.desc h2.name').text(),\n      address: info[0] ? info[0].trim() : '',\n      phoneNumber: info[1] ? info[1].trim() : '',\n      movies: movies\n    }\n  }\n\n  /**\n   * Parse movie information to generate a standardized response.\n   * @param  {object}  $         Raw Cheerio object from a cheerio.load() call, used to parse movies for the given\n   *                             theater.\n   * @param  {object}  movie     Cheerio object for the movie that you want to parse.\n   * @param  {boolean} alternate If you are parsing a movie from a \"movie sort\", pass true to use alternate scraper\n   *                             logic.\n   * @param  {string}  movieId   If calling this from getMovie(), this is a movie ID representation for the movie you are\n   *                             parsing.\n   * @return {object}            Standardized response for the parsed movie.\n   */\n  _parseMovie ($, movie, alternate, movieId) {\n    if (typeof alternate === 'undefined') {\n      alternate = false\n    }\n\n    var name = alternate ? movie.find('h2[itemprop=name]').text() : movie.find('.name').text()\n\n    // If the movie doesn't have a name, then there's a good chance that the theater attached to this isn't showing\n    // anything, so let's just not set a movie here.\n    if (name === '') {\n      return false\n    }\n\n    if (typeof movieId === 'undefined') {\n      var cloakedUrl\n      if (alternate) {\n        cloakedUrl = movie.find('.header .desc h2[itemprop=name] a').attr('href')\n      } else {\n        cloakedUrl = movie.find('.name a').attr('href')\n      }\n      // Get the Id from left links XD\n      if (typeof cloakedUrl === 'undefined') {\n        cloakedUrl = $('#left_nav .section a').attr('href')\n      }\n\n      movieId = qs.parse(url.parse(cloakedUrl).query).mid\n    }\n\n    // Movie info format: RUNTIME - RATING - GENRE - TRAILER - IMDB\n    // Some movies don't have a rating, trailer, or IMDb pages, so we need to account for that.\n    var info\n    if (alternate) {\n      // Genre and director data are separated by a line break instead of a hyphen, so hack a line break into the HTML\n      // we have generated, so we can split that apart to grab the genre without adding a lot more complexity to the\n      // process.\n      var content = movie.find('.info').eq(-1).html()\n      content = content.replace('<br>', ' - ')\n      movie.find('.info').eq(-1).html(content)\n\n      info = movie.find('.info').eq(-1).text().split(' - ')\n    } else {\n      info = movie.find('.info').text().split(' - ')\n    }\n\n    var runtime, rating, genre\n    if (info[0].match(/(hr |min)/)) {\n      runtime = this._removeNonAsciiCharacters(info[0].trim())\n      if (!info[1]) {\n        info[1] = ''\n      }\n\n      if (info[1].match(/Rated/)) {\n        rating = this._removeNonAsciiCharacters(info[1].replace(/Rated/, '').trim())\n        if (typeof info[2] !== 'undefined') {\n          if (info[2].match(/(IMDB|Trailer)/i)) {\n            genre = []\n          } else {\n            genre = info[2].trim().split('/')\n          }\n        } else {\n          genre = []\n        }\n      } else {\n        rating = null\n\n        if (info[1].match(/(IMDB|Trailer)/i)) {\n          genre = []\n        } else {\n          genre = info[1].trim().split('/')\n        }\n      }\n    } else {\n      runtime = null\n      rating = null\n      genre = [info[0].trim()]\n    }\n\n    if (genre) {\n      genre = this._removeNonAsciiCharacters(genre)\n    }\n\n    // If we're running this from getMovie(), then let's grab some move fluff data on the movie.\n    if (alternate && movieId) {\n      var director, cast\n      for (let x in info) {\n        if (info[x].match(/Director:/)) {\n          director = info[x].replace(/Director:/, '').trim()\n        } else if (info[x].match(/Cast:/)) {\n          cast = info[x].replace(/Cast:/, '').trim().split(', ')\n        }\n      }\n\n      // Longer descriptions can be split between two spans and displays a more/less link\n      var description = movie.find('span[itemprop=\"description\"]').text()\n      movie.find('#SynopsisSecond0').children().last().remove()\n      description = description + movie.find('#SynopsisSecond0').text()\n      description.replace('/\"/', '')\n      description = description.trim()\n    }\n\n    // The movie sort has a different formatting for showtimes, so if we're parsing that, handle it inside of\n    // _getMovies() instead.\n    var showtimes = { showtimes: [] }\n    if (!alternate) {\n      showtimes = this._parseShowtimes($, movie)\n    }\n\n    var movieData = {\n      id: movieId,\n      name: name,\n      runtime: runtime,\n      rating: rating,\n      genre: genre,\n      imdb: this._parseImdb(movie),\n      trailer: this._parseTrailer(movie),\n      showtimes: showtimes.showtimes\n    }\n    if (showtimes.showtime_tickets) movieData.showtime_tickets = showtimes.showtime_tickets\n\n    if (alternate && movieId) {\n      movieData.director = director\n      movieData.cast = cast\n      movieData.description = description\n    }\n\n    return movieData\n  }\n\n  /**\n   * Take in a \"thing\", can be either a movie or a theater object (if you are using alternate logic for a getMovies\n   * lookup), and parse movie showtimes for it.\n   * @param  {object} $    Raw Cheerio object from a cheerio.load() call, used to parse movies for the given\n   *                        theater.\n   * @param  {object} movie Cheerio object for either the movie of theater that you want to parse showtimes for.\n   * @return {array}        Sorted and parsed array of movie showtimes.\n   */\n  _parseShowtimes ($, thing) {\n    var meridiem = false\n    var response = {}\n\n    // Google displays showtimes like \"10:00  11:20am  1:00  2:20  4:00  5:10  6:50  8:10  9:40  10:55pm\". Since\n    // they don't always apply am/pm to times, we need to run through the showtimes in reverse and then apply the\n    // previous (later) meridiem to the next (earlier) movie showtime so we end up with something like\n    // [\"10:00am\", \"11:20am\", \"1:00pm\", ...].\n\n    var getTime = function (raw_time) {\n      var showtime = this._removeNonAsciiCharacters(raw_time).trim()\n\n      var match = showtime.match(/(am|pm)/)\n      if (match) {\n        meridiem = match[0]\n      } else if (meridiem) {\n        showtime += meridiem\n      }\n\n      return showtime\n    }\n\n    var target = thing.find('.times a.fl')\n    var showtimes\n    if (target.length === 0) {\n      // No ticket urls available, process only showtimes\n      showtimes = thing.find('.times').text().split(' ')\n      response.showtimes = _.map(showtimes.reverse(), getTime.bind(this)).reverse()\n    } else {\n      // Ticket urls are available\n      showtimes = target.map(function (i, el) {\n        var tickets_url = url.parse($(el).attr('href'), true)\n\n        return {\n          time: $(el).text(),\n          url: tickets_url.query.q\n        }\n      }).get()\n\n      response.showtime_tickets = {}\n      response.showtimes = _.map(showtimes.reverse(), function (item) {\n        var time = getTime.bind(this)(item.time)\n        response.showtime_tickets[time] = item.url\n        return time\n      }.bind(this)).reverse()\n    }\n\n    return response\n  }\n\n  /**\n   * Parse movie information for a trailer URL.\n   * @param  {object}       movie  Cheerio object for the movie that you want to parse.\n   * @return {string|false}        Found trailer URL, or false if not.\n   */\n  _parseTrailer (movie) {\n    if (movie.find('.info a:contains(\"Trailer\")').length) {\n      var cloakedUrl = 'https://google.com' + movie.find('.info a:contains(\"Trailer\")').attr('href')\n\n      return qs.parse(url.parse(cloakedUrl).query).q\n    }\n\n    return null\n  }\n\n  /**\n   * Parse movie information for an IMDB URL.\n   * @param  {object}       movie  Cheerio object for the movie that you want to parse.\n   * @return {string|false}        Found IMDB URL, or false if not.\n   */\n  _parseImdb (movie) {\n    if (movie.find('.info a:contains(\"IMDb\")').length) {\n      var cloakedUrl = 'https://google.com' + movie.find('.info a:contains(\"IMDb\")').attr('href')\n\n      return qs.parse(url.parse(cloakedUrl).query).q\n    }\n\n    return null\n  }\n\n  /**\n   * Take in a mixed object (string or array) and return back a normalized string sans some non-ASCII characters that\n   * cause problems (like some Turkish letters).\n   * @param  {mixed} thing\n   * @return {mixed}\n   */\n  _removeNonAsciiCharacters (thing) {\n    if (typeof thing === 'object') {\n      for (let x in thing) {\n        thing[x] = thing[x].replace(/[^\\x00-\\x7F]/g, '')\n      }\n\n      return thing\n    }\n\n    return thing.replace(/[^\\x00-\\x7F]/g, '')\n  }\n\n  /**\n   * Make a request to the API endpoint.\n   * @param  {object}   params  Parameters to send along in the query string.\n   * @param  {Function} cb      Callback function to run for the API after processing a request.\n   * @param  {Function} handler Callback function to handle a request and generate an object of data.\n   * @return {void}\n   */\n  _request (params, cb, handler) {\n    var query = {\n      hl: this.lang,\n      near: this.location,\n      date: this.date,\n      start: ((this.page - 1) * 10)\n    }\n\n    for (let i in params) {\n      query[i] = params[i]\n    }\n\n    var options = {\n      url: this.baseUrl,\n      qs: query,\n      headers: {\n        'User-Agent': this.userAgent,\n        'gzip': true\n      },\n      encoding: 'binary'\n    }\n\n    request(options, (error, response, body) => {\n      if (error || response.statusCode !== 200) {\n        if (error === null) {\n          cb('Unknown error occured while querying theater data from Google Movies.')\n        } else {\n          cb(error)\n        }\n\n        return\n      }\n\n      handler(body)\n    })\n  }\n}\n\nmodule.exports = showtimes\n"}